#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const { promisify } = require('util')
const arg = require('arg')

const readdir = promisify(fs.readdir)

const COMMAND = 'update-index'

const HELP = `
  Usage: ${COMMAND} <components_path>

  Options:

    -h, --help               display this help and exit

  Examples:

    $ ${COMMAND} ./components
`

const argspec = {
  '--help': Boolean,
  '-h': '--help',
}

const error = message => console.error(`\n  ${COMMAND} error: ${message}`)

async function main(argv, argspec) {
  const args = arg(argspec, { permissive: true })

  if (args['--help']) return HELP

  if (!args._[0]) {
    throw new Error(`no components directory provided\n${HELP}`)
  }

  return updateIndex(args._[0])
}

function filterJsFiles(list) {
  return list.filter(item => item.endsWith('.js') && item !== 'index.js')
}

async function appGroups(componentsPath) {
  const components = await readdir(componentsPath)

  return Promise.all(
    components.map(name =>
      readdir(path.join(componentsPath, name, 'examples'))
        .catch(err => {
          if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
            return []
          }
          throw err
        })
        .then(filterJsFiles)
        .then(apps =>
          apps.map(filename => ({
            name: path.basename(filename, '.js'),
            // path relative to the devbox dir
            path: path.relative(
              path.join(__dirname, '..'),
              path.join(componentsPath, name, 'examples', filename)
            ),
          }))
        )
        .then(apps => ({ name, apps }))
    )
  ).then(groups => groups.filter(group => group.apps.length > 0))
}

function generateImports(apps) {
  return apps
    .reduce(
      (lines, group) => [
        ...lines,
        ...group.apps.reduce(
          (lines, app) => [
            ...lines,
            `export { default as ${app.name} } from '${app.path}'`,
          ],
          []
        ),
      ],
      []
    )
    .join('\n')
}

async function updateIndex(componentsPath) {
  const appsByGroup = await appGroups(componentsPath)
  const content = generateImports(appsByGroup)
  console.log(`
// This file is generated by the examples-index command. Please do not edit
// manually, or your changes will be overwritten.
`)
  console.log(content)
}

main(process.argv, argspec).then(
  out => {
    if (out) console.log(out)
    process.exit(0)
  },
  err => {
    error(err.message)
    process.exit(1)
  }
)
